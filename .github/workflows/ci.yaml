name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      PROTOBUF_VERSION: 3.1.0
      RUST_BACKTRACE: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Grant execute permission to install-proto.sh
        run: chmod +x ci/install-proto.sh
        working-directory: ./

      - name: install proto buf
        run: "./ci/install-proto.sh"
        shell: bash

  # cargo-check:
  #   name: Cargo check
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: check

  fmt-check:
    name: Rust fmt
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # test-and-coverage:
  #   name: Test and Coverage
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         rustup self update
  #         rustup update
  #         cargo install cargo-tarpaulin

  #     - name: Run tests with coverage
  #       run: cargo tarpaulin --all-features --verbose

  release-github-artifact:
    name: Release Packaging
    env:
      PROJECT_NAME_UNDERSCORE: rust-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # needs: [cargo-check, fmt-check, test-and-coverage]
    needs: [fmt-check]
    steps:
      - name: Check out from Git
        uses: actions/checkout@v4

      - name: Grant permission to run command
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: Check if Git tag exists
        run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

      - name: Skip if Git tag does not exist
        if: steps.check-tag.outputs.HEAD_TAG == ''
        run: exit 0 # Exit with success, effectively skipping subsequent steps

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Release Build
        run: cargo build --release --bin cli

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/release/cli

  release-docker-image:
    env:
      DOCKER_HUB_REPOSITORY: thuan2172001/rust-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # needs: [cargo-check, fmt-check, test-and-coverage]
    needs: [fmt-check]
    steps:
      - name: Check out from Git
        uses: actions/checkout@v4

      - name: Grant permission to run command
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: Check if Git tag exists
        run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

      - name: Skip if Git tag does not exist
        if: steps.check-tag.outputs.HEAD_TAG == ''
        run: exit 0 # Exit with success, effectively skipping subsequent steps

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image
        run: |
          docker build . --tag ${{ env.DOCKER_HUB_REPOSITORY }}:latest
          docker push ${{ env.DOCKER_HUB_REPOSITORY }}:latest
